package ai.promethean.API;
import ai.promethean.ExecutingAgent.*;
import ai.promethean.Parser.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import ai.promethean.DataModel.*;
import ai.promethean.Planner.*;



/**
 * This API is meant to be as simple as possible and expandable as possible.
 * To add new functionality define your own function and the arguments it takes.
 * ParserError and PlannerError classes serve to throw descriptive errors from specific components of the system.
 * Example, if we want to add a function to create resource objects, simply create that function and then
 * call it with the resource object that keeps track of the examples
 */

public class API {
    public API(){

    }
    public void throwPlannerError(String err_msg){
        throw new PlannerError(err_msg);
    }

    public void throwParserError(String err_msg){
        throw new ParserError(err_msg);
    }

    public Map<String, Object> parseInput(String inputFile, Boolean isFile){
        ParserInterface p = new JSONParser();
        Map<String, Object> objects = p.parse(inputFile, isFile);

        return objects;
    }

    /**
     * Generate a plan to be used by planner from list of parsed objects
     * @param parsedObjects List of objects generated by parser
     */

    public Plan generatePlanFromParsedObjects(Map<String, Object> parsedObjects){
        Algorithm algo = new AStar((SystemState) parsedObjects.get("initialState"),
                (GoalState) parsedObjects.get("goalState"),
                (TaskDictionary) parsedObjects.get("tasks"),
                (StaticOptimizations) parsedObjects.get("optimizations"));
        Planner planner = new Planner(algo);
        Plan plan = planner.plan();
        return plan;
    }

    /**
     * Generate a plan from a specific SystemState Object instead of list of parsed objects
     * @param currentState
     * @param goalState
     * @param taskDictionary
     * @param optimizations
     * @return
     */
    public Plan generatePlanFromSystemState(SystemState currentState, GoalState goalState, TaskDictionary taskDictionary, StaticOptimizations optimizations){
        Algorithm algo = new AStar(currentState, goalState, taskDictionary, optimizations);
        Planner planner = new Planner(algo);
        Plan plan = planner.plan();
        return plan;
    }
    /**
     * Parse the input file and generate a plan from the parsed objects.
     * Initialize the clock and handle perturbation or goal state responses
     */

    public void executePlan(String input, Boolean isFile){
        Map <String, Object> objects = parseInput(input, isFile);
        Plan plan = generatePlanFromParsedObjects(objects);
        ClockManager clockManager = new ClockManager();
        clockManager.runPlanClock(plan, objects);

    }
}

