package ai.promethean.ExecutingAgent;

import ai.promethean.DataModel.*;
import ai.promethean.Planner.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class ClockManager {
    /**
     * Take a plan and parsed objects from parser and run the simulation, replanning if necessary
     * @param plan planblock generated by planner
     * @param planObjects list of objects generated by paser
     */
    public void runPlanClock(Plan plan, Map<String, Object> planObjects){
        boolean planCompleted = false;
        //Pull out the goalState, taskDict, and optimizations incase we need to replan
        GoalState goalState = (GoalState) planObjects.get("goalState");
        TaskDictionary taskDict = (TaskDictionary) planObjects.get("tasks");
        StaticOptimizations optimizations = (StaticOptimizations) planObjects.get("optimizations");

        System.out.println("\nInitial State:\n======================");
        System.out.println(plan.getInitialState());
        System.out.println("\nRuntime Goal State:\n======================");
        System.out.println(plan.getGoalState());
        System.out.println("\nPlan:\n======================");


        while (!planCompleted){
            ClockObserver.addState(plan.getInitialState());
            Clock clock = new Clock(plan.getInitialState().getTime());
            ClockObserver tasks = new TaskExecutor(plan);
            clock.addObserver(tasks);
            //check size of plan objects to see if a perturbation exists
            if (planObjects.get("perturbations")!=null) {
                ClockObserver perturbations = new PerturbationInjector((List<Perturbation>)planObjects.get("perturbations"));
                clock.addObserver(perturbations);
            }
            System.out.println("\nExecuting Plan:\n======================");
            clock.runClock();

            planCompleted = ((TaskExecutor)tasks).isPlanCompleted();
            if(planCompleted){
                //TODO: Make this call the goal state handler
                System.out.println("Plan completed");
            }
            // a perturbation has occurred and needs to be handled.
            else{
                //get the current state of the craft for replanning
                System.out.println("===================== Replanning =====================");
                SystemState currentState = ClockObserver.peekLastState();
                plan = generatePlanFromSystemState(currentState, goalState, taskDict, optimizations);
                List<PlanBlock> list = plan.getPlanBlockList();
            }
        }
    }

    /**
     * Generate a plan from current system state if replanning is necessary
     * @param currentState
     * @param goalState
     * @param taskDictionary
     * @param optimizations
     * @return
     */
    public Plan generatePlanFromSystemState(SystemState currentState, GoalState goalState, TaskDictionary taskDictionary, StaticOptimizations optimizations){
        Algorithm algo = new AStar();
        Planner planner = new Planner(algo);
        Plan plan = planner.plan(currentState, goalState, taskDictionary, optimizations);
        return plan;
    }
}
